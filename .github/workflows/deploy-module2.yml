name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
    paths-ignore:
      - "CHANGELOG.md"
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "CHANGELOG.md"
  workflow_dispatch:

env:
  buildFolderName: "output"
  buildArtifactName: "output"
  testResultFolderName: "testResults"
  defaultBranch: "main"

jobs:
  build:
    name: Build and Package Module
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup GitVersion (v5.x)
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: '5.x'

      - name: Determine version (GitVersion)
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          useConfigFile: false

      - name: Build & Package Module
        run: pwsh ./build.ps1 -ResolveDependency -Tasks pack
        env:
          ModuleVersion: ${{ steps.gitversion.outputs.NuGetVersionV2 }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}/

  test:
    name: Unit Tests Matrix
    needs: build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            shell: pwsh
            name: Linux
            artifact: CodeCoverageLinux
          - os: windows-latest
            shell: pwsh
            name: Windows_PowerShell7
            artifact: CodeCoverageWinPS7
          - os: windows-latest
            shell: powershell
            name: Windows_PowerShell5
            artifact: CodeCoverageWinPS51
          - os: macos-latest
            shell: pwsh
            name: macOS
            artifact: CodeCoverageMacOS
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Run Tests (${{ matrix.name }})
        run: pwsh ./build.ps1 -Tasks test
        shell: ${{ matrix.shell }}

      - name: Upload Test Results (${{ matrix.name }})
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/

  test_integration:
    name: Integration Tests Matrix
    needs: build
    strategy:
      matrix:
        include:
          - os: windows-latest
            shell: pwsh
            name: Windows_PowerShell7
          - os: windows-latest
            shell: powershell
            name: Windows_PowerShell5
          - os: ubuntu-latest
            shell: pwsh
            name: Linux_PowerShell7
          - os: macos-latest
            shell: pwsh
            name: macOS_PowerShell7
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Run Integration Tests (${{ matrix.name }})
        run: pwsh ./build.ps1 -Tasks test -CodeCoverageThreshold 0 -PesterPath 'tests/Integration'
        shell: ${{ matrix.shell }}

      - name: Upload Integration Test Results (${{ matrix.name }})
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: IntegrationResults-${{ matrix.name }}
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/

  code_coverage:
    name: Merge & Publish Code Coverage
    needs: [test]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Download Test Artifact (Linux)
        uses: actions/download-artifact@v4
        with:
          name: CodeCoverageLinux
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}

      - name: Download Test Artifact (macOS)
        uses: actions/download-artifact@v4
        with:
          name: CodeCoverageMacOS
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}

      - name: Download Test Artifact (Windows PS5.1)
        uses: actions/download-artifact@v4
        with:
          name: CodeCoverageWinPS51
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}

      - name: Download Test Artifact (Windows PS7)
        uses: actions/download-artifact@v4
        with:
          name: CodeCoverageWinPS7
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}

      - name: Merge coverage files
        run: pwsh ./build.ps1 -Tasks merge

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/JaCoCo_coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy Module
    needs: [test, test_integration, code_coverage]
    runs-on: ubuntu-latest
    if: ${{ (github.event_name != 'pull_request') && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Publish Release
        run: pwsh ./build.ps1 -Tasks publish
        env:
          GitHubToken: ${{ secrets.GITHUB_TOKEN }}
          GalleryApiToken: ${{ secrets.GALLERY_API_TOKEN }}
          ReleaseBranch: ${{ env.defaultBranch }}
          MainGitBranch: ${{ env.defaultBranch }}

      - name: Create Changelog PR
        run: pwsh ./build.ps1 -Tasks Create_ChangeLog_GitHub_PR
        env:
          GitHubToken: ${{ secrets.GITHUB_TOKEN }}
          ReleaseBranch: ${{ env.defaultBranch }}
          MainGitBranch: ${{ env.defaultBranch }}
